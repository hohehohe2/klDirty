object DirtyState;


//===================================================================
//===================================================================
///Interface representing some data which dirty is managed by DirtyState object.
interface DirtyManagedData
{
	///Implement this using inputs on which this object is dependent. This method is called inside DirtyState.update() while the state is dirty.
	updateMe!();

	///Called when an input is removed. You can override this method at a subclass if need some cleanup code.
	onInputRemoved!(Ref<DirtyManagedData> inputData);
};


//===================================================================
//===================================================================
///Base object representing some data which dirty is managed by DirtyState object.
object DirtyManagedDataBase : DirtyManagedData
{
	///DirtyState object that manages this object's dirty.
	DirtyState state;
};

function DirtyManagedDataBase()
{
	this.state = DirtyState(this);
}

inline function DirtyManagedDataBase.removeAllDependencies!()
{
	this.state.removeAllDependencies();
}

///Update the data (i.e. updateMe!() method is called) and reset the dirty.
/// If this data has dirty inputs, their update!() are also called recursively.
inline function DirtyManagedDataBase.update!()
{
	this.state.update();
}

///Returns true if dirty.
inline function Boolean DirtyManagedDataBase.isDirty()
{
	return this.state.isDirty();
}

///Add a data that this data depends on. Returns false if cycle check fails. Do nothing and returns true if data is null.
inline function Boolean DirtyManagedDataBase.addInput!(io DirtyManagedDataBase data)
{
	if (data)
	{
		return this.state.addInput(data.state);
	}
	return true;
}

///Remove a data that this data depends on. Do nothing if data is null.
inline function DirtyManagedDataBase.removeInput!(io DirtyManagedDataBase data)
{
	if (data)
	{
		this.state.removeInput(data.state);
	}
}

///You must override this method at a subclass.
function DirtyManagedDataBase.updateMe!(){}

///You can override this method at a subclass as necessary.
function DirtyManagedDataBase.onInputRemoved!(Ref<DirtyManagedData> inputData){}


//===================================================================
//===================================================================
///Integer data which dirty is managed by DirtyState object.
object DirtyManagedDataInteger : DirtyManagedDataBase
{
	Integer value;
};


//===================================================================
//===================================================================
///String data which dirty is managed by DirtyState object.
object DirtyManagedDataString : DirtyManagedDataBase
{
	String value;
};


//===================================================================
//===================================================================
///Boolean data which dirty is managed by DirtyState object.
object DirtyManagedDataBoolean : DirtyManagedDataBase
{
	Boolean value;
};


//===================================================================
//===================================================================
///Float32 data which dirty is managed by DirtyState object.
object DirtyManagedDataFloat32 : DirtyManagedDataBase
{
	Float32 value;
};


//===================================================================
//===================================================================
///Float64 data which dirty is managed by DirtyState object.
object DirtyManagedDataFloat64 : DirtyManagedDataBase
{
	Float64 value;
};
