require DirtyState;


//===================================================================
//===================================================================
///Test object. It takes up to two inputs (inputA and inputB) and calculates the sum of them to this.value.
///You need to subclass one of DirtyManagedData*, implement updateMe!(), and set dependencies using addInput!().
/// Additionally you can override onInputRemoved!() for some cleanup code.
object MyData : DirtyManagedDataInteger
{
	MyData inputA;
	MyData inputB;
};

function MyData(Integer value)
{
	this.value = value;
}

function MyData.setInputA!(io MyData data) //data can be null.
{
	this.removeInput(this.inputA); //Do nothing if this.inputA == null.
	this.addInput(data); //Do nothing if data == null.
	this.inputA = data;
}

function MyData.setInputB!(io MyData data)
{
	this.removeInput(this.inputB);
	this.addInput(data);
	this.inputB = data;
}

//this.value <= this.inputA.value + this.inputB.value
function MyData.updateMe!()
{
	this.value = 0;
	if (this.inputA)
	{
		this.value += this.inputA.value;
	}
	if (this.inputB)
	{
		this.value += this.inputB.value;
	}
}

function MyData.onInputRemoved!(Ref<DirtyManagedData> inputData)
{
	//This method is called when an input dependency is removed, either by
	//calling this method's removeInput() or the input's removeAllDependencies().
	//Usually when an input dependency is remove, this object will no longer
	//use the input data, so it should not keep the reference of the input.
	if (this.inputA == inputData)
	{
		this.inputA = null;
	}
	else if (this.inputB == inputData)
	{
		this.inputB = null;
	}
}


//===================================================================
//===================================================================
///Basic usage. Set dependency and update. updateMe!() is called as a lazy-evaluation manner.
function Boolean testDependency()
{
	MyData data0(10), data1(20), data2(30), data3(0);
	data3.setInputA(data2);
	data3.setInputB(data1);
	data1.setInputA(data0);
	data0.value = 15;
	data3.update();
	return data0.value == 15 && data1.value == 15 && data2.value == 30 && data3.value == 45;
}


//===================================================================
//===================================================================
///When you change a value in one of the inputs, you need to call update. It will set every data state
/// that depends on it as dirty.
function Boolean testSetDirty()
{
	MyData data0(10), data1(20), data2(30), data3(0);
	data3.setInputA(data2);
	data3.setInputB(data1);
	data1.setInputA(data0);
	data0.value = 15;
	data3.update(); //Mark every data clean.
	data0.value = 20;
	data0.update(); //update() used as setDirty. 
	data3.update(); //Reevaluate.
	return data0.value == 20 && data1.value == 15 && data2.value == 30 && data3.value == 45;
}


//===================================================================
//===================================================================
///removeAllDependencies isolate a data from others. You can use the method when you no longer need the data.
function Boolean testRemoveAllDependencies()
{
	MyData data0(10), data1(20), data2(30), data3(0);
	data3.setInputA(data2);
	data3.setInputB(data1);
	data1.setInputA(data0);
	//Now data3-data2
	//         \data1-data0
	data1.removeAllDependencies(); //data0.value -> data1.value copy. data3 and data1's onInputRemoved!() are called.
	//Now data3-data2 dependency only.
	data0.value = 15;
	data3.update();

	return data0.value == 15 && data1.value == 10 && data2.value == 30 && data3.value == 40 && data3.inputB == null && data1.inputA == null;
}


//===================================================================
//===================================================================
operator entry()
{
	report(testDependency());
	report(testSetDirty());
	report(testRemoveAllDependencies());
}
